{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to LINDA+ This is the documentation page of the LINDA+ software. Workflow LINDA+ is a method used to identify intra- and inter-cellular interaction networks at a domain resolution, allowing to further study the effects of Alternative Splicing (AS) on signalling. It is a tool that integrates large-scale knowledge of directed joint interactions (protein-protein and Domain-Domain intra-cellular interactions) as well as structurally resolved ligand-receptor pairs from various resources with estimated transcription factor enzymatic activities based on sc-RNAseq reads (see Figure 1. ). Figure 1: LINDA+ Pipeline At the core of LINDA+ stands an optimization problem, formulated as an Integer Linear Programming (ILP), which allows for joint mechanistic analysis of inter- and intra-cellular protein interaction networks based on scRNAseq data. Dependencies Resources LINDA+ relies the following resources for performing it's analysis: Resources of protein interactions at a domain resolution level: By default, LINDA+ uses DIGGER as a resource of joint Protein-Protein (PPI) and Domain-Domain (DDI) interactions in human. This allows LINDA+ to mechanistically characterize effects that post-transcriptional processes, such as alternative splicing, might have on protein interaction networks. Resources of ligand-receptor pairs: Several ligand-receptor interaction resources have been integrated in LINDA+, including: CellChat , CellPhoneDB , CellTalkDB and LIANA . For LINDA+, we have additionally annotated extracellular domains of the receptors, through which the ligands would be able to interact. Resources of transcription factors (TF) to gene relations: LINDA+ additionally relies on known tf-to-gene relations in order to: i) Determine significantly regulated TF's based on gene-expression values for each cell-type; and ii) Identifying what kinds of ligand genes do these TF's regulate and which can then be secreted into the extra-cellular space. Two types of human tf-to-gene resources have been integrated in LINDA+: DoRothEA and TfLink . All of the above resources have been integrated in the LINDA+ R-package and details about how combinations of each type of resource can be used for a real-case application of LINDA+ can be found in the Tutorials (hyperlinked once tutorials have been added). Users can of course use their own resources of molecular interactions for as long as they are provided in a format recognizable by LINDA+ (see details here (hyperlink to be added later)). Additionally we provide prior knowledge of interactions tailored specifically towards contextualizing molecular interaction networks in a cardiobiology context (details here (to be added when ready)). For this purpose we have utilized prompt-based data mining of Large Language Models (LLM's), to enhance our biomedical knowledge resources based on a collection 1015 molecular cardiology related manuscripts (see details here (hyperlink to be added later)). Solver LINDA+ requires the interactive version of IBM Cplex as an ILP problem optimiser. The IBM ILOG Cplex is freely available through Academic Initiative . Details about how to obtain the free full license under the Academic Initiative have been provided here . Once the CPLEX solver has been acquired by the user, they must save the executable files in any desired location in the machine they are using and then they can run. Then, thy should make the acquired cplex solver executable, but running the following (in MAC/Unix systems): chmod +x cplex . Finally, you can perform the LINDA+ analyses after specifying the path to the executable file (through the solverPath parameter, see examples below). Installation Once the required solvers have been obtained and the mentioned R-package depedencies have been installed, then the users can proceed with the installation of LINDA. Currently users can install LINDA+ either through GitHub or directly from the source after downloading the source (tar file) and typing one of the following in the R command line: directly from GitHub: devtools::install_github(\"dieterich-lab/LINDAPlus\", build_vignettes = FALSE) or from source: devtools::install_local(path = \"path_to_extracted_LINDAPlus_directory\", build_manual = TRUE, build_vignettes = FALSE, force = TRUE) NOTE: If you wish for the the Vignettes to be built and for the test example to run successfully, please put the cplex executable file under the /Downloads/ directory and only then you can set build_vignettes = TRUE . In the case when building the vignettes is not possible, you can access it here . Upon installation of the package, you can check on the package Vignettes: # check vignettes vignette(\"LINDAPlus\") # check documentation of the main function ?runLINDAPlus","title":"Home"},{"location":"#welcome-to-linda","text":"This is the documentation page of the LINDA+ software.","title":"Welcome to LINDA+"},{"location":"#workflow","text":"LINDA+ is a method used to identify intra- and inter-cellular interaction networks at a domain resolution, allowing to further study the effects of Alternative Splicing (AS) on signalling. It is a tool that integrates large-scale knowledge of directed joint interactions (protein-protein and Domain-Domain intra-cellular interactions) as well as structurally resolved ligand-receptor pairs from various resources with estimated transcription factor enzymatic activities based on sc-RNAseq reads (see Figure 1. ). Figure 1: LINDA+ Pipeline At the core of LINDA+ stands an optimization problem, formulated as an Integer Linear Programming (ILP), which allows for joint mechanistic analysis of inter- and intra-cellular protein interaction networks based on scRNAseq data.","title":"Workflow"},{"location":"#dependencies","text":"","title":"Dependencies"},{"location":"#resources","text":"LINDA+ relies the following resources for performing it's analysis: Resources of protein interactions at a domain resolution level: By default, LINDA+ uses DIGGER as a resource of joint Protein-Protein (PPI) and Domain-Domain (DDI) interactions in human. This allows LINDA+ to mechanistically characterize effects that post-transcriptional processes, such as alternative splicing, might have on protein interaction networks. Resources of ligand-receptor pairs: Several ligand-receptor interaction resources have been integrated in LINDA+, including: CellChat , CellPhoneDB , CellTalkDB and LIANA . For LINDA+, we have additionally annotated extracellular domains of the receptors, through which the ligands would be able to interact. Resources of transcription factors (TF) to gene relations: LINDA+ additionally relies on known tf-to-gene relations in order to: i) Determine significantly regulated TF's based on gene-expression values for each cell-type; and ii) Identifying what kinds of ligand genes do these TF's regulate and which can then be secreted into the extra-cellular space. Two types of human tf-to-gene resources have been integrated in LINDA+: DoRothEA and TfLink . All of the above resources have been integrated in the LINDA+ R-package and details about how combinations of each type of resource can be used for a real-case application of LINDA+ can be found in the Tutorials (hyperlinked once tutorials have been added). Users can of course use their own resources of molecular interactions for as long as they are provided in a format recognizable by LINDA+ (see details here (hyperlink to be added later)). Additionally we provide prior knowledge of interactions tailored specifically towards contextualizing molecular interaction networks in a cardiobiology context (details here (to be added when ready)). For this purpose we have utilized prompt-based data mining of Large Language Models (LLM's), to enhance our biomedical knowledge resources based on a collection 1015 molecular cardiology related manuscripts (see details here (hyperlink to be added later)).","title":"Resources"},{"location":"#solver","text":"LINDA+ requires the interactive version of IBM Cplex as an ILP problem optimiser. The IBM ILOG Cplex is freely available through Academic Initiative . Details about how to obtain the free full license under the Academic Initiative have been provided here . Once the CPLEX solver has been acquired by the user, they must save the executable files in any desired location in the machine they are using and then they can run. Then, thy should make the acquired cplex solver executable, but running the following (in MAC/Unix systems): chmod +x cplex . Finally, you can perform the LINDA+ analyses after specifying the path to the executable file (through the solverPath parameter, see examples below).","title":"Solver"},{"location":"#installation","text":"Once the required solvers have been obtained and the mentioned R-package depedencies have been installed, then the users can proceed with the installation of LINDA. Currently users can install LINDA+ either through GitHub or directly from the source after downloading the source (tar file) and typing one of the following in the R command line: directly from GitHub: devtools::install_github(\"dieterich-lab/LINDAPlus\", build_vignettes = FALSE) or from source: devtools::install_local(path = \"path_to_extracted_LINDAPlus_directory\", build_manual = TRUE, build_vignettes = FALSE, force = TRUE) NOTE: If you wish for the the Vignettes to be built and for the test example to run successfully, please put the cplex executable file under the /Downloads/ directory and only then you can set build_vignettes = TRUE . In the case when building the vignettes is not possible, you can access it here . Upon installation of the package, you can check on the package Vignettes: # check vignettes vignette(\"LINDAPlus\") # check documentation of the main function ?runLINDAPlus","title":"Installation"},{"location":"about/","text":"About License Distributed under the GNU GPLv3 License. Reference For any reference, at the moment please use the current dedicated LINDA+ documentation page . Issues For any issue, please open a New issue on GitHub: https://github.com/dieterich-lab/LINDAPlus/issues .","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#license","text":"Distributed under the GNU GPLv3 License.","title":"License"},{"location":"about/#reference","text":"For any reference, at the moment please use the current dedicated LINDA+ documentation page .","title":"Reference"},{"location":"about/#issues","text":"For any issue, please open a New issue on GitHub: https://github.com/dieterich-lab/LINDAPlus/issues .","title":"Issues"},{"location":"documentation/","text":"Documentation Here are provided documentation about the inputs that each main function that the LINDA+ R-package takes. Resources access The resources that have been described in the main page , have been integrated into LINDA+ and combinations of such resources can be made readily available by running one of the following R commands: Human # DIGGER + DoRothEA + CellChat load(file = system.file(\"extdata\", \"digger.dorothea.cellchat.human.RData\", package = \"LINDAPlus\")) # DIGGER + DoRothEA + CellPhoneDB load(file = system.file(\"extdata\", \"digger.dorothea.cellphonedb.human.RData\", package = \"LINDAPlus\")) # DIGGER + DoRothEA + CellTalkDB load(file = system.file(\"extdata\", \"digger.dorothea.celltalkdb.human.RData\", package = \"LINDAPlus\")) # DIGGER + DoRothEA + LIANA load(file = system.file(\"extdata\", \"digger.dorothea.liana.human.RData\", package = \"LINDAPlus\")) # DIGGER + TfLink + CellChat load(file = system.file(\"extdata\", \"digger.tflink.cellchat.human.RData\", package = \"LINDAPlus\")) # DIGGER + TfLink + CellPhoneDB load(file = system.file(\"extdata\", \"digger.tflink.cellphonedb.human.RData\", package = \"LINDAPlus\")) # DIGGER + TfLink + CellTalkDB load(file = system.file(\"extdata\", \"digger.tflink.celltalkdb.human.RData\", package = \"LINDAPlus\")) # DIGGER + TfLink + LIANA load(file = system.file(\"extdata\", \"digger.tflink.liana.human.RData\", package = \"LINDAPlus\")) Mouse Not available yet Each of the resources that can be loaded represents a data-frame with the following columns: 'pfam_source' (containing the PFAM ID of the source protein domain interactor), 'pfam_target' (containing the PFAM ID of the target protein domain interactor), 'gene_source' (containing the gene name of the protein of the source domain) and 'gene_target' (containing the gene name of the protein of the target domain). There are three types of interactions that can be distinguished in this data-frame: PPI-DDI : These are the joint domain-domain and protein-protein interactions that are used as a resource to model the interactions within each individual cell-type. They can be retreived from the data-frame object as those interactions whose both 'pfam_source' and 'pfam_target' elements are not NA's. TF-Ligands : These refer to those relations in which a transcription factor regulates the expression of a ligand gene which then undergoes transcriptional and translational processes before finally being released in the extra-cellular space. In this way, it would be possible for our models to help us understand through which cell-types and by which mechanism is a specific ligand secreted. They can be retreived from the data-frame object as those interactions whose both 'pfam_source' and 'pfam_target' elements are NA's. Ligand-Receptors : These refer to the ligand-receptor interactions. They can be retreived from the data-frame object as those interactions whose both 'pfam_source' values are NA's while 'pfam_target' elements are PFAM domain ID's corresponding to the extra-cellular domains which interact to ligands in the extra-cellular space. LINDA+ functionalities The LINDA+ R-package implements two functions: i) prepare_linda_inputs() , which prepares the list of interaction tables that are used for the network inference; as well as ii) runLINDAPlus() , which is the main function of the package that is used to infer the regulatory inter- and intra- cellular protein interactions. prepare_linda_inputs() Before performing any types of network inference analysis, users should first generate the background.networks.list object that is taken as an input from the runLINDAPlus() functionality by using the prepare_linda_inputs() function. Besides generating the background.networks.list , the prepare_linda_inputs() can also optionally perform some processing of the provided interactions. Such processing steps consist in defining for example which genes to keep or to remove for each of the cell-types in their prior knowledge of interactions. For example, one instance when such processing step would be recommended is for the case when some genes might not be expressed in any given cell-type and thus this functionality would allow the users to remove protein nodes from the solution whose corresponding genes have not been expressed. In case when such a functionality is used, below is provided a description of the inputs that can be provided to such a function. interactions_df : A data-frame of all possible interactions (PPI/DDI, Ligand-Receptors and TF-to-Ligand) that will be used for the network inference analysis. The format of such an input should be the same as the ones described above . cell_types : Names of the cell-types. Note: Do not assign the 'LR' name to any of the cell-types as this is reserved by LINDA+ for it's internal network inference analysis. genes2keep : An optional named list object (same as 'cell_types') of character vectors defining the list of gene-names to keep in the interaction knowledge provided in the 'interactions_df'. By default, genes2keep=NULL , in which case no processing will be applied to the 'interactions_df' object. genes2remove : A named list object (same as 'cell_types') of character vectors defining the list of gene-names to keep in the interaction knowledge provided in the 'interactions_df'. By default, genes2remove=NULL , in which case no processing will be applied to the 'interactions_df' object. ligands : A character vector, indicating the names of the ligands that the user wishes to consider for the network inference analysis. By default, ligands=NULL , in which case ligands will be considered all the elements defined as such based on the structure of the 'interactions_df' object (see details above ). receptors : A character vector, indicating the names of the receptors that the user wishes to consider for the network inference analysis. By default, receptors=NULL , in which case receptors will be considered all the elements defined as such based on the structure of the 'interactions_df' object (see details above ). runLINDAPlus() The main function in LINDA+ that is used to perform the network inference analysis is runLINDAPlus() and which can take the following inputs: Mandatory Inputs: background.networks.list : The list consists of two elements: a) background.networks : This should be a named (cell-types) list containing data-frames joint PPI-DDI's for each cell-type. Each data-frame represents the set of interaction knowledge for each cell-type and it should contain at least 4 columns with the following ID's: 'pfam_source', 'pfam_target', gene_source' and 'gene_target'. In the case where we have no name for a specific domain or where this is not applicable, please set the corresponding values in the 'pfam_source' or 'pfam_target' as NA's (for more details, see in the examples); and b) ligand.receptors : This also should be a named list ('ligands' and 'receptors') which contains character vectors where the set of elements that corresponds to Ligands and Receptors have been defined as such. tf.scores : This information should be provided as a named list (for each cell-type) and which contains data-frames indicating the enrichment scores for each TF at each cell-type. The data-frames should contain at least two columns: 'tf' (indicating the TF ID) and the numerical 'score' (indicating the enrichment scores for each TF). Optional Inputs: lr.scores : This information can be provided as a named list (for each cell-type) and which contains data-frames indicating scores that can be assigned to each ligand-receptor interactions targeting a specific cell. The scores should be provided from 0 to 1. The higher the score assigned to a ligand-receptor interaction, the more likely it is for it to be present in the network solution, while in the case of a score of 0, this will force LINDA+ to not include such an interaction in the solution for a specific indicated cell-type. ligand.scores : A data-frame object which should contain two columns: 'ligands' (providing the ligand ID's) and 'score' (providing the score associated to each ligand, i.e. abundance). The scores should be provided either 0 or 1 and the higher the score of the ligand, the more likely it will be for a ligand to appear in the solution. A score of 0, means that this ligand will not be able to perturb any receptor of any cell-type. ccc.scores : A data-frame object which should contain two columns: 'ccc' (providing pairs of interacting cell-types, i.e. \"CellA=CellB\" for the case when CellA communicates with CellB ) and 'score' (providing the score associated to each communicating cell pair). The scores should be provided between 0 and 1 and the higher the score a cell-cell interaction, the more likely it will be for the source cell-type to communicate to the target cell-type. A score of 0, means that the defined source cell-type will not talk to the defined target cell-type. as.input : A data-frame object which should contain four columns: 'cell_type' (defining the cell-type in which the splicing effect is happening), 'proteinID' (defining the name of the protein affected by splicing), 'domainID' (defining the PFAM identifier of the protein domain that has been affected by splicing) and 'effect' (defining the type of effect that the alternative splicing has on this specific domain: either exclusion or inclusion ). In the case of exclusion effect, the corresponding domain will be conidered as skipped and not involved in any of the domain interactions. In the case of inclusion , the defined domain will be present in the solution as an interactor. solverPath : Here is provided the location path to the desired solver. By default, the path to the cplex solver is set to: solverPath = \"/usr/bin/cplex\" . top.tf : A named numerical vector defining how many TF's should be considered as significantly enriched for each of the tables provided in the tf.scores input. The names of the elements in the vector should correspond to the desired cell-types. By default, top.tf = NULL , in which case all the TF's given in the tf.scores list across each cell-type willbe considered as significantly enriched. lambda1 : A numerical value representing the penalization term of the primary objective of the objective function - TF inclusion. This penalty factor is suggested to be set to a higher value compared to other penalty parameters in order to strongly penalize the inclusion of not signifcantly regulated TF's. By default, lambda1=10 . lambda2 : A numerical value representing the penalization term of the ligands nodes in the network solution. It is only used when ligand.scores data-frame object is provided. In this case, by default (when not specified), lambda2=15 . lambda3 : A numerical value representing the penalization term of the ligand-receptor interactions in the network solution. It is only used when lr.scores or ccc.scores or both have been provided. In this case, by default (when not specified), lambda3=1 . lambda4 : A numerical value representing the penalization term of the network components in the solution (proteins and domains). By default, lambda4=0.1 . mipgap : CPLEX parameter which sets an absolute tolerance on the gap between the best integer objective and the objective of the best node remaining. When this difference falls below the value of this parameter, the mixed integer optimization is stopped. By default, mipgap=0 . relgap : CPLEX parameter which sets a relative tolerance on the objective value for the solutions in the solution pool. Solutions that are worse (either greater in the case of a minimization, or less in the case of a maximization) than the incumbent solution by this measure are not kept in the solution pool. For example, if relgap=0.001 (or 0.1 percent), meaning that then solutions worse than the incumbent by 0.1 percent or more will be discarded. By default, relgap=0 . populate : CPLEX parameter which sets the maximum number of mixed integer programming (MIP) solutions generated for the solution pool during each call to the populate procedure. Populate stops when it has generated the amount of solutions set in this parameter. By default, populate=500 . nSolutions : The number of solutions to be provided by LINDA+. By default, nSolutions=100 . timelimit : CPLEX parameter which sets the maximum optimization time in seconds. By default, timelimit=3600 . intensity : CPLEX parameter which controls the trade-off between the number of solutions generated for the solution pool and the amount of time or memory consumed. Values from 1 to 4 invoke increasing effort to find larger numbers of solutions. Higher values are more expensive in terms of time and memory but are likely to yield more solutions. By default, intensity=1 . replace : CPLEX parameter which designates the strategy for replacing a solution in the solution pool when the solution pool has reached its capacity. The value 0 replaces solutions according to a first-in, first-out policy. The value 1 keeps the solutions with the best objective values. The value 2 replaces solutions in order to build a set of diverse solutions. By default, replace=1 . threads : CPLEX parameter which manage the number of threads that CPLEX uses. By default, threads=0 (let CPLEX decide). The number of threads that CPLEX uses is no more than the number of CPU cores available on the computer where CPLEX is running. condition : A parameter which can be used in the case when LINDA is desirde to run over multiple analyses in parallel. It is useful to distinguish between the multiple ILP problems defined for each case as well as the solutions obtained. By default, conditions=1 . save_res : A TRUE/FALSE parameter defining whether you would like to save the results as an .RData object. If save_res = TRUE , a 'res_condition.RData' (depending on the value set to condition ) will be saved in the local working direcotry. By default, save_res=FALSE . Understaning Output The output from the runLINDAPlus() analysis consist of a list which contains the following: combined_solutions : A data-frame which contains information about the inferred interactions in the inter- and the intra-cellular space. There are 4 columns in this data-frame: i) Space : Showing on which space does a specific interaction belong to (it can either be 'Extra-Cellular' for ligand-receptor interactions or name of the cell-type); ii) Gene_Source : Containing the source protein name of the interaction as a gene ID; iii) Gene_Target : Containing the target protein name of the interaction as a gene ID; iv) Weight : Indicating how often did an interaction occur among the number of alternative solutions that have been enumerated; and v) * DDDI : Telling through which domains are these interactions taking place. node_attributes : A data-frame which contains information about the type of nodes that have been inferred in the network solutions. Every node can take either one of the following attributes: 'Ligand', 'Protein', 'TF', 'Receptor' and 'Domain'. This table can be useful when visualizing the network through special network visualization applications such as CytoScape .","title":"Documentation"},{"location":"documentation/#documentation","text":"Here are provided documentation about the inputs that each main function that the LINDA+ R-package takes.","title":"Documentation"},{"location":"documentation/#resources-access","text":"The resources that have been described in the main page , have been integrated into LINDA+ and combinations of such resources can be made readily available by running one of the following R commands: Human # DIGGER + DoRothEA + CellChat load(file = system.file(\"extdata\", \"digger.dorothea.cellchat.human.RData\", package = \"LINDAPlus\")) # DIGGER + DoRothEA + CellPhoneDB load(file = system.file(\"extdata\", \"digger.dorothea.cellphonedb.human.RData\", package = \"LINDAPlus\")) # DIGGER + DoRothEA + CellTalkDB load(file = system.file(\"extdata\", \"digger.dorothea.celltalkdb.human.RData\", package = \"LINDAPlus\")) # DIGGER + DoRothEA + LIANA load(file = system.file(\"extdata\", \"digger.dorothea.liana.human.RData\", package = \"LINDAPlus\")) # DIGGER + TfLink + CellChat load(file = system.file(\"extdata\", \"digger.tflink.cellchat.human.RData\", package = \"LINDAPlus\")) # DIGGER + TfLink + CellPhoneDB load(file = system.file(\"extdata\", \"digger.tflink.cellphonedb.human.RData\", package = \"LINDAPlus\")) # DIGGER + TfLink + CellTalkDB load(file = system.file(\"extdata\", \"digger.tflink.celltalkdb.human.RData\", package = \"LINDAPlus\")) # DIGGER + TfLink + LIANA load(file = system.file(\"extdata\", \"digger.tflink.liana.human.RData\", package = \"LINDAPlus\")) Mouse Not available yet Each of the resources that can be loaded represents a data-frame with the following columns: 'pfam_source' (containing the PFAM ID of the source protein domain interactor), 'pfam_target' (containing the PFAM ID of the target protein domain interactor), 'gene_source' (containing the gene name of the protein of the source domain) and 'gene_target' (containing the gene name of the protein of the target domain). There are three types of interactions that can be distinguished in this data-frame: PPI-DDI : These are the joint domain-domain and protein-protein interactions that are used as a resource to model the interactions within each individual cell-type. They can be retreived from the data-frame object as those interactions whose both 'pfam_source' and 'pfam_target' elements are not NA's. TF-Ligands : These refer to those relations in which a transcription factor regulates the expression of a ligand gene which then undergoes transcriptional and translational processes before finally being released in the extra-cellular space. In this way, it would be possible for our models to help us understand through which cell-types and by which mechanism is a specific ligand secreted. They can be retreived from the data-frame object as those interactions whose both 'pfam_source' and 'pfam_target' elements are NA's. Ligand-Receptors : These refer to the ligand-receptor interactions. They can be retreived from the data-frame object as those interactions whose both 'pfam_source' values are NA's while 'pfam_target' elements are PFAM domain ID's corresponding to the extra-cellular domains which interact to ligands in the extra-cellular space.","title":"Resources access"},{"location":"documentation/#linda-functionalities","text":"The LINDA+ R-package implements two functions: i) prepare_linda_inputs() , which prepares the list of interaction tables that are used for the network inference; as well as ii) runLINDAPlus() , which is the main function of the package that is used to infer the regulatory inter- and intra- cellular protein interactions.","title":"LINDA+ functionalities"},{"location":"documentation/#prepare_linda_inputs","text":"Before performing any types of network inference analysis, users should first generate the background.networks.list object that is taken as an input from the runLINDAPlus() functionality by using the prepare_linda_inputs() function. Besides generating the background.networks.list , the prepare_linda_inputs() can also optionally perform some processing of the provided interactions. Such processing steps consist in defining for example which genes to keep or to remove for each of the cell-types in their prior knowledge of interactions. For example, one instance when such processing step would be recommended is for the case when some genes might not be expressed in any given cell-type and thus this functionality would allow the users to remove protein nodes from the solution whose corresponding genes have not been expressed. In case when such a functionality is used, below is provided a description of the inputs that can be provided to such a function. interactions_df : A data-frame of all possible interactions (PPI/DDI, Ligand-Receptors and TF-to-Ligand) that will be used for the network inference analysis. The format of such an input should be the same as the ones described above . cell_types : Names of the cell-types. Note: Do not assign the 'LR' name to any of the cell-types as this is reserved by LINDA+ for it's internal network inference analysis. genes2keep : An optional named list object (same as 'cell_types') of character vectors defining the list of gene-names to keep in the interaction knowledge provided in the 'interactions_df'. By default, genes2keep=NULL , in which case no processing will be applied to the 'interactions_df' object. genes2remove : A named list object (same as 'cell_types') of character vectors defining the list of gene-names to keep in the interaction knowledge provided in the 'interactions_df'. By default, genes2remove=NULL , in which case no processing will be applied to the 'interactions_df' object. ligands : A character vector, indicating the names of the ligands that the user wishes to consider for the network inference analysis. By default, ligands=NULL , in which case ligands will be considered all the elements defined as such based on the structure of the 'interactions_df' object (see details above ). receptors : A character vector, indicating the names of the receptors that the user wishes to consider for the network inference analysis. By default, receptors=NULL , in which case receptors will be considered all the elements defined as such based on the structure of the 'interactions_df' object (see details above ).","title":"prepare_linda_inputs()"},{"location":"documentation/#runlindaplus","text":"The main function in LINDA+ that is used to perform the network inference analysis is runLINDAPlus() and which can take the following inputs: Mandatory Inputs: background.networks.list : The list consists of two elements: a) background.networks : This should be a named (cell-types) list containing data-frames joint PPI-DDI's for each cell-type. Each data-frame represents the set of interaction knowledge for each cell-type and it should contain at least 4 columns with the following ID's: 'pfam_source', 'pfam_target', gene_source' and 'gene_target'. In the case where we have no name for a specific domain or where this is not applicable, please set the corresponding values in the 'pfam_source' or 'pfam_target' as NA's (for more details, see in the examples); and b) ligand.receptors : This also should be a named list ('ligands' and 'receptors') which contains character vectors where the set of elements that corresponds to Ligands and Receptors have been defined as such. tf.scores : This information should be provided as a named list (for each cell-type) and which contains data-frames indicating the enrichment scores for each TF at each cell-type. The data-frames should contain at least two columns: 'tf' (indicating the TF ID) and the numerical 'score' (indicating the enrichment scores for each TF). Optional Inputs: lr.scores : This information can be provided as a named list (for each cell-type) and which contains data-frames indicating scores that can be assigned to each ligand-receptor interactions targeting a specific cell. The scores should be provided from 0 to 1. The higher the score assigned to a ligand-receptor interaction, the more likely it is for it to be present in the network solution, while in the case of a score of 0, this will force LINDA+ to not include such an interaction in the solution for a specific indicated cell-type. ligand.scores : A data-frame object which should contain two columns: 'ligands' (providing the ligand ID's) and 'score' (providing the score associated to each ligand, i.e. abundance). The scores should be provided either 0 or 1 and the higher the score of the ligand, the more likely it will be for a ligand to appear in the solution. A score of 0, means that this ligand will not be able to perturb any receptor of any cell-type. ccc.scores : A data-frame object which should contain two columns: 'ccc' (providing pairs of interacting cell-types, i.e. \"CellA=CellB\" for the case when CellA communicates with CellB ) and 'score' (providing the score associated to each communicating cell pair). The scores should be provided between 0 and 1 and the higher the score a cell-cell interaction, the more likely it will be for the source cell-type to communicate to the target cell-type. A score of 0, means that the defined source cell-type will not talk to the defined target cell-type. as.input : A data-frame object which should contain four columns: 'cell_type' (defining the cell-type in which the splicing effect is happening), 'proteinID' (defining the name of the protein affected by splicing), 'domainID' (defining the PFAM identifier of the protein domain that has been affected by splicing) and 'effect' (defining the type of effect that the alternative splicing has on this specific domain: either exclusion or inclusion ). In the case of exclusion effect, the corresponding domain will be conidered as skipped and not involved in any of the domain interactions. In the case of inclusion , the defined domain will be present in the solution as an interactor. solverPath : Here is provided the location path to the desired solver. By default, the path to the cplex solver is set to: solverPath = \"/usr/bin/cplex\" . top.tf : A named numerical vector defining how many TF's should be considered as significantly enriched for each of the tables provided in the tf.scores input. The names of the elements in the vector should correspond to the desired cell-types. By default, top.tf = NULL , in which case all the TF's given in the tf.scores list across each cell-type willbe considered as significantly enriched. lambda1 : A numerical value representing the penalization term of the primary objective of the objective function - TF inclusion. This penalty factor is suggested to be set to a higher value compared to other penalty parameters in order to strongly penalize the inclusion of not signifcantly regulated TF's. By default, lambda1=10 . lambda2 : A numerical value representing the penalization term of the ligands nodes in the network solution. It is only used when ligand.scores data-frame object is provided. In this case, by default (when not specified), lambda2=15 . lambda3 : A numerical value representing the penalization term of the ligand-receptor interactions in the network solution. It is only used when lr.scores or ccc.scores or both have been provided. In this case, by default (when not specified), lambda3=1 . lambda4 : A numerical value representing the penalization term of the network components in the solution (proteins and domains). By default, lambda4=0.1 . mipgap : CPLEX parameter which sets an absolute tolerance on the gap between the best integer objective and the objective of the best node remaining. When this difference falls below the value of this parameter, the mixed integer optimization is stopped. By default, mipgap=0 . relgap : CPLEX parameter which sets a relative tolerance on the objective value for the solutions in the solution pool. Solutions that are worse (either greater in the case of a minimization, or less in the case of a maximization) than the incumbent solution by this measure are not kept in the solution pool. For example, if relgap=0.001 (or 0.1 percent), meaning that then solutions worse than the incumbent by 0.1 percent or more will be discarded. By default, relgap=0 . populate : CPLEX parameter which sets the maximum number of mixed integer programming (MIP) solutions generated for the solution pool during each call to the populate procedure. Populate stops when it has generated the amount of solutions set in this parameter. By default, populate=500 . nSolutions : The number of solutions to be provided by LINDA+. By default, nSolutions=100 . timelimit : CPLEX parameter which sets the maximum optimization time in seconds. By default, timelimit=3600 . intensity : CPLEX parameter which controls the trade-off between the number of solutions generated for the solution pool and the amount of time or memory consumed. Values from 1 to 4 invoke increasing effort to find larger numbers of solutions. Higher values are more expensive in terms of time and memory but are likely to yield more solutions. By default, intensity=1 . replace : CPLEX parameter which designates the strategy for replacing a solution in the solution pool when the solution pool has reached its capacity. The value 0 replaces solutions according to a first-in, first-out policy. The value 1 keeps the solutions with the best objective values. The value 2 replaces solutions in order to build a set of diverse solutions. By default, replace=1 . threads : CPLEX parameter which manage the number of threads that CPLEX uses. By default, threads=0 (let CPLEX decide). The number of threads that CPLEX uses is no more than the number of CPU cores available on the computer where CPLEX is running. condition : A parameter which can be used in the case when LINDA is desirde to run over multiple analyses in parallel. It is useful to distinguish between the multiple ILP problems defined for each case as well as the solutions obtained. By default, conditions=1 . save_res : A TRUE/FALSE parameter defining whether you would like to save the results as an .RData object. If save_res = TRUE , a 'res_condition.RData' (depending on the value set to condition ) will be saved in the local working direcotry. By default, save_res=FALSE .","title":"runLINDAPlus()"},{"location":"documentation/#understaning-output","text":"The output from the runLINDAPlus() analysis consist of a list which contains the following: combined_solutions : A data-frame which contains information about the inferred interactions in the inter- and the intra-cellular space. There are 4 columns in this data-frame: i) Space : Showing on which space does a specific interaction belong to (it can either be 'Extra-Cellular' for ligand-receptor interactions or name of the cell-type); ii) Gene_Source : Containing the source protein name of the interaction as a gene ID; iii) Gene_Target : Containing the target protein name of the interaction as a gene ID; iv) Weight : Indicating how often did an interaction occur among the number of alternative solutions that have been enumerated; and v) * DDDI : Telling through which domains are these interactions taking place. node_attributes : A data-frame which contains information about the type of nodes that have been inferred in the network solutions. Every node can take either one of the following attributes: 'Ligand', 'Protein', 'TF', 'Receptor' and 'Domain'. This table can be useful when visualizing the network through special network visualization applications such as CytoScape .","title":"Understaning Output"},{"location":"download/","text":"Downloads LINDA+ is hosted in GitHub as an R-package: https://github.com/dieterich-lab/LINDAPlus .","title":"Downloads"},{"location":"download/#downloads","text":"LINDA+ is hosted in GitHub as an R-package: https://github.com/dieterich-lab/LINDAPlus .","title":"Downloads"},{"location":"tutorial/","text":"Tutorials Here are provided tutorials about how to use LINDA+ R-package in it's basic form as well as all of it's implemented features. We start by first describing the inputs that are to be given for a LINDA+ analysis, followed by tutorial examples of each feature on a small Toy example to then follow with a real-case application. Toy Example Below are provided the steps of running a small Toy test study which we have depicted in Figure 2 . In this Toy case-study we are depicting a system of 3 different cell-types ( CellA , CellB and CellC ) where each node represents a protein (domains not depicted) while edges represent interactions between nodes. Red rhombus represent cell-receptors, blue circles represent intra-cellular proteins, gray squares represent TF\u2019s, while in black circles we are depicting ligands in the extra-cellular space. Figure 2: LINDA+ 3-Cell System Toy Example In Figure 2 we have defined as the significantly regulated TF's those squares that have a thick red border (nodes A14 and A17 for CellA ; nodes B13, B14 and B16 for CellB ; nodes C13 and C15 for CellC ). Additionally, we might notice that we have a receptor named 'A1|A2' in CellA . Such an annotation should be used for the cases when a receptor consist of a complex of two or more proteins (in this case A and B). NOTE: LINDA+ is able to handle interactions of ligands with protein complex receptors and receptors that consist of multi-subunit protein complexes (i.e. 2 or more protein units), should be depicted as separated through | . The set of DDI/PPI interactions for this toy example, can be loaded by running the following: library(LINDAPlus) load(file = system.file(\"extdata\", \"toy.background.networks.list.RData\", package = \"LINDAPlus\")) # print(background.networks.list) LINDA+ basic mode analysis For running LINDA+ in it's basic mode, besides the background.networks.list object, we would also need to provide a list of TF enrichment scores for each cell-type as well as define which one of them are to be considered as significantly regulated based on their absolute enrichment score values. More information about how we can obtain TF enrichment score values for each cell-type based on sc/sn-RNAseq data has been provided here (link to real case example when ready). The estimated TF activity scores should be provided as a named list (for each cell-type) and which contains data-frames indicating the enrichment scores for each TF at each cell-type like in the object that we load below: load(file = system.file(\"extdata\", \"toy.tf.scores.RData\", package = \"LINDAPlus\")) # print(tf.scores) Additionally users can provide a named (also by cell-type) numerical vector to indicate the number of TF\u2019s to consider as significantly regulated based on their absolute enrichment values. In case that this parameter has not been defined, then by default all the TF\u2019s provided in the data-frames list will be considered as significantly regulated. load(file = system.file(\"extdata\", \"toy.top.tf.RData\", package = \"LINDAPlus\")) # print(top.tf) This is all that would be needed to run LINDA+ in it's simplest form and we can anchieve this as in the following: res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf) # print(res$combined_solutions) # print(res$node_attributes) The optimization results (as read from the res$combined_solutions output table), has been depicted in the Figure 3 below. Figure 3: LINDA+ 3-Cell System Toy Example - Basic Run. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. LINDA+ with ligand scores analysis Users can provide information about the abundance of ligands in the extra-cellular space as made evident by Secretomics data through a data-frame object. More abundant ligands/extra-cellular molecules are more likely to initiate conformational changes in receptors. The data-frame provided should contain two columns: \u2018ligands\u2019 (providing the ligand ID\u2019s) and \u2018score\u2019 (providing the score associated to each ligand, i.e. abundance). The higher the score of the ligand, the more likely it will be for a ligand to appear in the solution. In this case, we penalize the inclusion of ligand L3 in the solution (lower score value given). ## Loading the ligand scores load(file = system.file(\"extdata\", \"toy.ligand.scores.RData\", package = \"LINDAPlus\")) # print(ligand.scores) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf, ligand.scores = ligand.scores) # print(res$combined_solutions) # print(res$node_attributes) The optimization result for this case has been depicted in Figure 4 below. Figure 4: LINDA+ 3-Cell System Toy Example - Analysis with ligand scores. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Ligand 'L3', does not participate anymore in the interaction. LINDA+ with ligand-receptor scores analysis In the case when Secretomics data is not available, users may still have evidence of functional ligand-receptor interactions. This evidence can come from previous cell-communication analysis based on sc-RNAseq data. In such cases, users can integrate the enrichment scores for ligand-receptor pairs into LINDA+. Doing so helps guide the network inference towards the desired ligand-receptor interactions. In this case users can provide a named list (for each cell-type) of data-frames consisting of ligand-receptor enrichment scores normalized between the values of 0 and 1. ## Loading the ligand-receptor scores load(file = system.file(\"extdata\", \"toy.lr.scores.RData\", package = \"LINDAPlus\")) # print(lr.scores) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf, lr.scores = lr.scores) # print(res$combined_solutions) # print(res$node_attributes) In this case, we have assigned a score 0 for the 'L2=A1|A2' interaction. The optimization result for this case has been depicted in Figure 5 below. Figure 5: LINDA+ 3-Cell System Toy Example - Analysis with ligand-receptor scores. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Interaction 'L2=A1|A2', does not participate anymore in the solution and the network has been re-wired towards alternative solutions. LINDA+ with cell-cell communication scores analysis Users can additionally provide scores (between 0 and 1) representing probability values about how likely would be for two cell-types to directly communicate with each-other (i.e. as made evident through spatial transcriptomics). The higher the score given, the more is likely for a cell-type pair to be directly communicating with each other, and when such score is set to 0, then special constraints will make it so these two cell-types would not be able to directly communicate with each-other. Such scores can be used in our modelling approach where we for example know that specific cell-types are in proximity or distant to each other, thus making the chances of direct communication between them higher or lower. Let\u2019s see how such scores can be provided and integrated into the LINDA+ analysis and what effects it has: ## Loading the cell-cell communication scores load(file = system.file(\"extdata\", \"toy.ccc.scores.RData\", package = \"LINDAPlus\")) # print(ccc.scores) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf, ccc.scores = ccc.scores) # print(res$combined_solutions) # print(res$node_attributes) In the ccc.scores object we have assigned a score 0 for 'CellA=CellC'. This can be interpreted that we ask for our model to not allow CellA to talk to CellB . The optimization result for this case has been depicted in Figure 6 below. Figure 6: LINDA+ 3-Cell System Toy Example - Analysis with cell-cell communication probability scores. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Interaction 'A14=L1', does not participate anymore in the solution, meaning that _CellA_ is not communicating to _CellC_ via the release of ligand 'L1'. LINDA+ with alternative splicing effects Given that LINDA+ simultaneously infers not only protein-protein interactions but also domain interactions, it enables us to examine how RNA modification mechanisms, like alternative splicing, might influence the presence or absence of domains within the structure of interacting proteins. This, in turn, allows us to assess the effects of such modifications on the interactions between proteins. This is achieved by giving to the network inference function an as.input data-frame object which lists domain ID\u2019s of certain proteins for any cell-type and how they have been affected based on, for example, evidence from differential splicing analyses. These effects can include exclusion (when we know that a domain of a protein has been skipped) or inclusion (when we try to understand how the inclusion of a domain in the network solution might affect the protein interactions). In the toy example below it can be demonstrated how the as.input object should be defined. ## Loading the alternative splicing effects objects load(file = system.file(\"extdata\", \"toy.as.input.RData\", package = \"LINDAPlus\")) # print(as.input) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, as.input = as.input, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf) # print(res$combined_solutions) # print(res$node_attributes) In Figure 7 we can see how the addition of information about included or excluded protein domains affects the re-wiring of the protein interactions. Figure 7: LINDA+ 3-Cell System Toy Example - Analysis with alternative-splicing effects. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Protein 'A8', does not participate anymore in the solution, since it's iteracting domains have been considered as skipped. Signalling has been rewired towards protein 'A7' and 'A9' instead. LINDA+ with perturbation effects Such feature which allows the users to introduce into the multicellular system effects from i.e. distant ligands or ligands which they themselves experimentally introduce into the system as a perturbation effect. In the case where the user wisshes to add perturbation effects from a specific ligand which does not come from any of the cell-types, LINDA+ automatically introduces into the system an auxilliary PseudoCell which consists of a single 'PSEUDOLIGAND', 'PSEUDORECEPTOR', 'PSEUDOPROTEIN' and 'PSEUDOTF' where the latter is then connected to the ligands that we are introducing in the system. In this case LINDA+ will then infer the interaction mechanisms happening within such PseudoCell and which lead to the secretion of the ligands which the users are are introducing remotely. Let\u2019s see how this example works by first loading the background network as well as the TF score objects with the effects from the PseudoCell : ## Loading the background knowledge with the PseudCell cell-type load(file = system.file(\"extdata\", \"toy.background.networks.list.with.perturbations.RData\", package = \"LINDAPlus\")) # print(background.networks.list$background.networks$PseudoCell) ## Loading the tf scores where PSEUDOTF of PseudoCell is considered as regulated load(file = system.file(\"extdata\", \"toy.tf.scores.with.perturbations.RData\", package = \"LINDAPlus\")) load(file = system.file(\"extdata\", \"toy.top.tf.with.perturbations.RData\", package = \"LINDAPlus\")) # print(tf.scores$PseudoCell) # print(top.tf) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf) # print(res$combined_solutions) # print(res$node_attributes) In Figure 8 we can see how the addition of an external perturbation ligand affects our toy multi-cellular system. Figure 8: LINDA+ 3-Cell System Toy Example - Analysis with ligand perturbation effects. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Ligand 'L5' perturbs _CellA_ and _CellB_, despite seemingly not being secreted by any of the three cell-types into consideration. Real-case application TODO when package available online","title":"Tutorials"},{"location":"tutorial/#tutorials","text":"Here are provided tutorials about how to use LINDA+ R-package in it's basic form as well as all of it's implemented features. We start by first describing the inputs that are to be given for a LINDA+ analysis, followed by tutorial examples of each feature on a small Toy example to then follow with a real-case application.","title":"Tutorials"},{"location":"tutorial/#toy-example","text":"Below are provided the steps of running a small Toy test study which we have depicted in Figure 2 . In this Toy case-study we are depicting a system of 3 different cell-types ( CellA , CellB and CellC ) where each node represents a protein (domains not depicted) while edges represent interactions between nodes. Red rhombus represent cell-receptors, blue circles represent intra-cellular proteins, gray squares represent TF\u2019s, while in black circles we are depicting ligands in the extra-cellular space. Figure 2: LINDA+ 3-Cell System Toy Example In Figure 2 we have defined as the significantly regulated TF's those squares that have a thick red border (nodes A14 and A17 for CellA ; nodes B13, B14 and B16 for CellB ; nodes C13 and C15 for CellC ). Additionally, we might notice that we have a receptor named 'A1|A2' in CellA . Such an annotation should be used for the cases when a receptor consist of a complex of two or more proteins (in this case A and B). NOTE: LINDA+ is able to handle interactions of ligands with protein complex receptors and receptors that consist of multi-subunit protein complexes (i.e. 2 or more protein units), should be depicted as separated through | . The set of DDI/PPI interactions for this toy example, can be loaded by running the following: library(LINDAPlus) load(file = system.file(\"extdata\", \"toy.background.networks.list.RData\", package = \"LINDAPlus\")) # print(background.networks.list)","title":"Toy Example"},{"location":"tutorial/#linda-basic-mode-analysis","text":"For running LINDA+ in it's basic mode, besides the background.networks.list object, we would also need to provide a list of TF enrichment scores for each cell-type as well as define which one of them are to be considered as significantly regulated based on their absolute enrichment score values. More information about how we can obtain TF enrichment score values for each cell-type based on sc/sn-RNAseq data has been provided here (link to real case example when ready). The estimated TF activity scores should be provided as a named list (for each cell-type) and which contains data-frames indicating the enrichment scores for each TF at each cell-type like in the object that we load below: load(file = system.file(\"extdata\", \"toy.tf.scores.RData\", package = \"LINDAPlus\")) # print(tf.scores) Additionally users can provide a named (also by cell-type) numerical vector to indicate the number of TF\u2019s to consider as significantly regulated based on their absolute enrichment values. In case that this parameter has not been defined, then by default all the TF\u2019s provided in the data-frames list will be considered as significantly regulated. load(file = system.file(\"extdata\", \"toy.top.tf.RData\", package = \"LINDAPlus\")) # print(top.tf) This is all that would be needed to run LINDA+ in it's simplest form and we can anchieve this as in the following: res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf) # print(res$combined_solutions) # print(res$node_attributes) The optimization results (as read from the res$combined_solutions output table), has been depicted in the Figure 3 below. Figure 3: LINDA+ 3-Cell System Toy Example - Basic Run. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis.","title":"LINDA+ basic mode analysis"},{"location":"tutorial/#linda-with-ligand-scores-analysis","text":"Users can provide information about the abundance of ligands in the extra-cellular space as made evident by Secretomics data through a data-frame object. More abundant ligands/extra-cellular molecules are more likely to initiate conformational changes in receptors. The data-frame provided should contain two columns: \u2018ligands\u2019 (providing the ligand ID\u2019s) and \u2018score\u2019 (providing the score associated to each ligand, i.e. abundance). The higher the score of the ligand, the more likely it will be for a ligand to appear in the solution. In this case, we penalize the inclusion of ligand L3 in the solution (lower score value given). ## Loading the ligand scores load(file = system.file(\"extdata\", \"toy.ligand.scores.RData\", package = \"LINDAPlus\")) # print(ligand.scores) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf, ligand.scores = ligand.scores) # print(res$combined_solutions) # print(res$node_attributes) The optimization result for this case has been depicted in Figure 4 below. Figure 4: LINDA+ 3-Cell System Toy Example - Analysis with ligand scores. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Ligand 'L3', does not participate anymore in the interaction.","title":"LINDA+ with ligand scores analysis"},{"location":"tutorial/#linda-with-ligand-receptor-scores-analysis","text":"In the case when Secretomics data is not available, users may still have evidence of functional ligand-receptor interactions. This evidence can come from previous cell-communication analysis based on sc-RNAseq data. In such cases, users can integrate the enrichment scores for ligand-receptor pairs into LINDA+. Doing so helps guide the network inference towards the desired ligand-receptor interactions. In this case users can provide a named list (for each cell-type) of data-frames consisting of ligand-receptor enrichment scores normalized between the values of 0 and 1. ## Loading the ligand-receptor scores load(file = system.file(\"extdata\", \"toy.lr.scores.RData\", package = \"LINDAPlus\")) # print(lr.scores) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf, lr.scores = lr.scores) # print(res$combined_solutions) # print(res$node_attributes) In this case, we have assigned a score 0 for the 'L2=A1|A2' interaction. The optimization result for this case has been depicted in Figure 5 below. Figure 5: LINDA+ 3-Cell System Toy Example - Analysis with ligand-receptor scores. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Interaction 'L2=A1|A2', does not participate anymore in the solution and the network has been re-wired towards alternative solutions.","title":"LINDA+ with ligand-receptor scores analysis"},{"location":"tutorial/#linda-with-cell-cell-communication-scores-analysis","text":"Users can additionally provide scores (between 0 and 1) representing probability values about how likely would be for two cell-types to directly communicate with each-other (i.e. as made evident through spatial transcriptomics). The higher the score given, the more is likely for a cell-type pair to be directly communicating with each other, and when such score is set to 0, then special constraints will make it so these two cell-types would not be able to directly communicate with each-other. Such scores can be used in our modelling approach where we for example know that specific cell-types are in proximity or distant to each other, thus making the chances of direct communication between them higher or lower. Let\u2019s see how such scores can be provided and integrated into the LINDA+ analysis and what effects it has: ## Loading the cell-cell communication scores load(file = system.file(\"extdata\", \"toy.ccc.scores.RData\", package = \"LINDAPlus\")) # print(ccc.scores) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf, ccc.scores = ccc.scores) # print(res$combined_solutions) # print(res$node_attributes) In the ccc.scores object we have assigned a score 0 for 'CellA=CellC'. This can be interpreted that we ask for our model to not allow CellA to talk to CellB . The optimization result for this case has been depicted in Figure 6 below. Figure 6: LINDA+ 3-Cell System Toy Example - Analysis with cell-cell communication probability scores. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Interaction 'A14=L1', does not participate anymore in the solution, meaning that _CellA_ is not communicating to _CellC_ via the release of ligand 'L1'.","title":"LINDA+ with cell-cell communication scores analysis"},{"location":"tutorial/#linda-with-alternative-splicing-effects","text":"Given that LINDA+ simultaneously infers not only protein-protein interactions but also domain interactions, it enables us to examine how RNA modification mechanisms, like alternative splicing, might influence the presence or absence of domains within the structure of interacting proteins. This, in turn, allows us to assess the effects of such modifications on the interactions between proteins. This is achieved by giving to the network inference function an as.input data-frame object which lists domain ID\u2019s of certain proteins for any cell-type and how they have been affected based on, for example, evidence from differential splicing analyses. These effects can include exclusion (when we know that a domain of a protein has been skipped) or inclusion (when we try to understand how the inclusion of a domain in the network solution might affect the protein interactions). In the toy example below it can be demonstrated how the as.input object should be defined. ## Loading the alternative splicing effects objects load(file = system.file(\"extdata\", \"toy.as.input.RData\", package = \"LINDAPlus\")) # print(as.input) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, as.input = as.input, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf) # print(res$combined_solutions) # print(res$node_attributes) In Figure 7 we can see how the addition of information about included or excluded protein domains affects the re-wiring of the protein interactions. Figure 7: LINDA+ 3-Cell System Toy Example - Analysis with alternative-splicing effects. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Protein 'A8', does not participate anymore in the solution, since it's iteracting domains have been considered as skipped. Signalling has been rewired towards protein 'A7' and 'A9' instead.","title":"LINDA+ with alternative splicing effects"},{"location":"tutorial/#linda-with-perturbation-effects","text":"Such feature which allows the users to introduce into the multicellular system effects from i.e. distant ligands or ligands which they themselves experimentally introduce into the system as a perturbation effect. In the case where the user wisshes to add perturbation effects from a specific ligand which does not come from any of the cell-types, LINDA+ automatically introduces into the system an auxilliary PseudoCell which consists of a single 'PSEUDOLIGAND', 'PSEUDORECEPTOR', 'PSEUDOPROTEIN' and 'PSEUDOTF' where the latter is then connected to the ligands that we are introducing in the system. In this case LINDA+ will then infer the interaction mechanisms happening within such PseudoCell and which lead to the secretion of the ligands which the users are are introducing remotely. Let\u2019s see how this example works by first loading the background network as well as the TF score objects with the effects from the PseudoCell : ## Loading the background knowledge with the PseudCell cell-type load(file = system.file(\"extdata\", \"toy.background.networks.list.with.perturbations.RData\", package = \"LINDAPlus\")) # print(background.networks.list$background.networks$PseudoCell) ## Loading the tf scores where PSEUDOTF of PseudoCell is considered as regulated load(file = system.file(\"extdata\", \"toy.tf.scores.with.perturbations.RData\", package = \"LINDAPlus\")) load(file = system.file(\"extdata\", \"toy.top.tf.with.perturbations.RData\", package = \"LINDAPlus\")) # print(tf.scores$PseudoCell) # print(top.tf) ## Running LINDA+ res <- runLINDAPlus(background.networks.list = background.networks.list, tf.scores = tf.scores, solverPath = \"/usr/bin/cplex\", #or just change the path to where the cplex executable is located top.tf = top.tf) # print(res$combined_solutions) # print(res$node_attributes) In Figure 8 we can see how the addition of an external perturbation ligand affects our toy multi-cellular system. Figure 8: LINDA+ 3-Cell System Toy Example - Analysis with ligand perturbation effects. In bold are highlighted the interactions and nodes that have been inferred as functional/regulated in our network analysis. Ligand 'L5' perturbs _CellA_ and _CellB_, despite seemingly not being secreted by any of the three cell-types into consideration.","title":"LINDA+ with perturbation effects"},{"location":"tutorial/#real-case-application","text":"TODO when package available online","title":"Real-case application"}]}